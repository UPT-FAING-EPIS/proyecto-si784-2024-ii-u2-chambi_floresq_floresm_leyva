name: Generate and Deploy HTML Report

on:
  push:
    branches:
      - main  # O la rama que prefieras
  pull_request:
    branches:
      - main  # O la rama que prefieras

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'  # Usa la versión de Python que necesites

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r proyecto/requirements.txt
        pip install pytest pytest-html

    - name: Run tests and generate HTML report
      run: |
        cd Proyecto  # Si 'Proyecto' es el directorio correcto
        pytest tests/ --html=tests/test_reports/result.html --maxfail=5 --disable-warnings

    - name: Mover archivo a Reportes
      run: |
        # Crea el directorio "Reportes" si no existe
        mkdir -p ../Reportes
        # Mueve solo el archivo result.html
        mv Proyecto/tests/test_reports/result.html ../Reportes/result.html

    - name: Configurar Git para publicar en GitHub Pages
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Publicar reporte en GitHub Pages
      run: |
        # Obtiene la última versión de la rama gh-pages
        git fetch origin gh-pages
        git checkout gh-pages
        # Mueve el archivo result.html a la raíz de la rama gh-pages
        cp ../Reportes/result.html reporte-prueba_unitaria.html
        git add reporte-prueba_unitaria.html
        # Si no hay cambios, no hace commit
        git commit -m "Publicando reporte de prueba unitaria" || echo "No hay cambios para commitear"
        # Publica los cambios en gh-pages
        git push origin gh-pages
